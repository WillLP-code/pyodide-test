export interface IAPI {
    call: (method: string, value: any) => Promise<any>;
}
export declare type APIImplementation = {
    handler: (method: string, value: any) => Promise<ResolverPromise>;
    init: (apiConfig: APIConfig, onResponse: APICallback) => Promise<void>;
};
export declare type APIConfig = {
    transport: APITransport;
    options: any;
};
export declare type APICallback = (value: any) => void;
export declare type ResolverPromise = (resolve: APICallback, reject: APICallback) => void;
export declare enum APITransport {
    PYODIDE = "pyodide",
    WEB = "web",
    STATIC = "static"
}
export declare enum LoadStatus {
    IDLE = "IDLE",
    LOADING = "LOADING",
    LOADED = "LOADED",
    READY = "READY",
    ERROR = "ERROR"
}
declare global {
    interface Window {
        loadPyodide: any;
        importScripts: any;
    }
}
