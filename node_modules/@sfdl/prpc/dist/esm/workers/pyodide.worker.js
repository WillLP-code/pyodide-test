/* eslint-disable no-restricted-globals */
// need this because workers need access to the self pseudo-global scope
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { LoadStatus } from '../types';
import { AttachedFileSerializer } from '../util/dataTransfer';
import { PyodideWorkerAction, } from './pyodide.types';
//importScripts is a global. Only run it if it is available (ignore if the module is loaded onto window)
// @ts-ignore: importScripts on global causes choke in def file
if (typeof importScripts === 'function') {
    // @ts-ignore: importScripts on global causes choke in def file
    importScripts('https://cdn.jsdelivr.net/pyodide/v0.21.2/full/pyodide.js');
}
var pyodideInst;
var apiApp;
var ensure_array = function (value) {
    if (!value.map) {
        value = [value];
    }
    return value;
};
var initializePyodide = function (id, config) { return __awaiter(void 0, void 0, void 0, function () {
    var options, installs, micropip, installs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                self.postMessage({ id: id, body: LoadStatus.LOADING });
                return [4 /*yield*/, self.loadPyodide()];
            case 1:
                pyodideInst = _a.sent();
                self.postMessage({ id: id, body: LoadStatus.LOADED });
                options = config.options || {};
                if (!options.nativePackages) return [3 /*break*/, 3];
                installs = ensure_array(options.nativePackages).map(function (pgk) {
                    console.log('loading native package', pgk);
                    return pyodideInst.loadPackage(pgk);
                });
                return [4 /*yield*/, Promise.all(installs)];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: 
            // Install micropip packages
            return [4 /*yield*/, pyodideInst.loadPackage('micropip')];
            case 4:
                // Install micropip packages
                _a.sent();
                micropip = pyodideInst.pyimport('micropip');
                if (!options.packages) return [3 /*break*/, 6];
                installs = ensure_array(options.packages).map(function (pgk) {
                    console.log('micropip installing', pgk);
                    return micropip.install(pgk);
                });
                return [4 /*yield*/, Promise.all(installs)];
            case 5:
                _a.sent();
                _a.label = 6;
            case 6:
                // Launch RCP app
                console.log('Launching PRPC app with options', options);
                try {
                    apiApp = pyodideInst
                        .pyimport("prpc_python.pyodide")
                        .PyodideSession(options.appName);
                }
                catch (_b) {
                    console.log('Failed to load current PRPC version. Trying legacy.');
                    apiApp = pyodideInst
                        .pyimport("rpc_wrap.pyodide")
                        .PyodideSession(options.appName);
                }
                self.postMessage({ id: id, body: LoadStatus.READY });
                return [2 /*return*/];
        }
    });
}); };
var runPyodideCode = function (id, method, value) { return __awaiter(void 0, void 0, void 0, function () {
    var serializer, payloadJSON, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serializer = new AttachedFileSerializer();
                payloadJSON = JSON.stringify(value, serializer.serializer);
                return [4 /*yield*/, apiApp.rpc(method, payloadJSON, serializer.files)];
            case 1:
                response = _a.sent();
                self.postMessage({
                    id: id,
                    body: response ? JSON.parse(response) : undefined,
                });
                return [2 /*return*/];
        }
    });
}); };
onmessage = function (evt) { return __awaiter(void 0, void 0, void 0, function () {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, , 6]);
                if (!(evt.data.action === PyodideWorkerAction.INIT)) return [3 /*break*/, 2];
                return [4 /*yield*/, initializePyodide(evt.data.id, evt.data.body)];
            case 1:
                _a.sent();
                return [3 /*break*/, 4];
            case 2:
                if (!(evt.data.action === PyodideWorkerAction.RUN)) return [3 /*break*/, 4];
                return [4 /*yield*/, runPyodideCode(evt.data.id, evt.data.body.method, evt.data.body.value)];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [3 /*break*/, 6];
            case 5:
                error_1 = _a.sent();
                console.error('Error occurred during pyodide action', error_1);
                self.postMessage({ id: evt.data.id, error: error_1 });
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); };
