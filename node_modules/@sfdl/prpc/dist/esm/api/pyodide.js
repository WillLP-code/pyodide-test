var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { v4 as uuidv4 } from 'uuid';
import { LoadStatus, } from '../types';
import { PyodideWorkerAction, } from '../workers/pyodide.types';
var worker;
var responseMap = {};
var createMessage = function (action, body, closes) {
    if (closes === void 0) { closes = true; }
    return {
        id: uuidv4(),
        action: action,
        body: body,
        closes: closes,
    };
};
var ResponseHandler = /** @class */ (function () {
    function ResponseHandler(resolve, reject) {
        var _this = this;
        this.handler = function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        };
        this.resolve = function (data) {
            return resolve || console.error('Unhandled resolve', data);
        };
        this.reject = function (data) { return reject || console.error('Unhandled reject', data); };
    }
    return ResponseHandler;
}());
var api = {
    handler: function (method, value) {
        var message = createMessage(PyodideWorkerAction.RUN, { method: method, value: value });
        var responseHandler = new ResponseHandler();
        var promise = new Promise(responseHandler.handler);
        responseMap[message.id] = responseHandler;
        worker.postMessage(message);
        return promise;
    },
    init: function (apiConfig, onResponse) { return __awaiter(void 0, void 0, void 0, function () {
        var message, responseHandler, promise, realResolve;
        return __generator(this, function (_a) {
            worker = new Worker(new URL('../workers/pyodide.worker.js', import.meta.url));
            // Message response handler - look up request by ID and invoke resolver function
            worker.onmessage = function (rec) {
                var resolver = responseMap[rec.data.id];
                if (rec.data.error) {
                    resolver.reject(rec.data.error);
                }
                else {
                    resolver.resolve(rec.data.body);
                    if (rec.data.closes) {
                        delete responseMap[rec.data.id];
                    }
                }
            };
            message = createMessage(PyodideWorkerAction.INIT, apiConfig, false);
            responseHandler = new ResponseHandler();
            promise = new Promise(responseHandler.handler);
            realResolve = responseHandler.resolve;
            responseHandler.resolve = function (status) {
                onResponse(status);
                if (status == LoadStatus.READY) {
                    // Resolve promise on load completion
                    realResolve(status);
                }
            };
            responseMap[message.id] = responseHandler;
            worker.postMessage(message);
            return [2 /*return*/, promise];
        });
    }); },
};
export default api;
